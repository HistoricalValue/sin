function inspect(val_code) {
	val = .!.<.~val_code>.;
	println(val_code, "(", typeof(val), "): ", val);
}

Customer = [
	"id": 0,
	"new": (function (class, name_) {
		return [
			"name": name_,
			"id": class.id++
		];
		})
];

inspect(.<Customer.id>.);
inspect(.<Customer.id++>.);

nl = "\n";
jon = Customer..new("Jonathon Bumpton");
JR = Customer..new("Jonathon Rumpton");

println(jon, nl, JR);

function valtocode(val) {
	str = "\"" + val + "\";";
	return .@str;
}

tested_code = nil;

function veval(code) {
	println("-----------------------------\n// *** Evaluating - tested_code = ", code, ": ", .!.<.~code>.);
	tested_code = code;
}


.< function () { 4; } >.;
 .< 5; >. ;


//============ Libfuncs test ============//
hello_msg = .< "Hello Boola." >.;
test_sequence = (function (test_code) { veval(.< .~test_code >.); });
test_sequence(.< print(.~hello_msg)   >.);
test_sequence(.< println(.~hello_msg) >.);
test_sequence(.< tostring(tested_code)  >.);
test_sequence(.< 34 >.);
test_sequence(.< strtonum(.#.<.~tested_code>.)  >.);
test_sequence(.< typeof(tested_code) >.);
test_sequence(.< typeof(.~tested_code) >.);
// strsavetofile, input, fileopen, fileclose, filewrite, fileread do not want to be tested now
argument_related_libfunc = .< totalarguments >.;
str = "\"" + .#.<.~argument_related_libfunc>. + "\";";
strval = .@str;
test_sequence(.< (function argnum_babler() { .~valtocode(tostring(argument_related_libfunc)); a=.!.<.~argument_related_libfunc>.; return a(); })(0,1,2,3,4) >.);
argument_related_libfunc = .< arguments >.;
test_sequence(.< .~tested_code >.);

val = argument_related_libfunc ;
println("\n\n\n Tested code is: \n ------------- ", typeof(val), "\n", val , "\n -------------");
val = .#.<.~val>. + ";";
println(" Unparsing it gives: \n ------------- ", typeof(val), "\n", val, "\n -------------");
val = .@val;
println(" Compiling it gives: \n ------------- ", typeof(val), "\n", val, "\n -------------");























println(.<( function () { } )>.);

println(.<function A(){}>.);

lamda = ( function () { println("lamda function");} );

lamda();


//f = .< function foo() { println("Hello forld"); } >. ;

//.!.< if (.~f) <.~f>(); >. ;

(function(){ println("Hello forld"); })();
//(.~f)();

//(.~f)(5);


function pow(b, p) {
	if (p == 0)
		result = .< 1 >.;
	else if (p == 1)
		result = .< .~b >.; // could also be just "b"
	else
		result = .< .~b * .~pow(b, p-1) >.;
	return result;
}

code = pow(.< 4 >., 5);

println(.#.~code);

println(.!.~code);


// String manipulation equivalent
function spow(b, p) {
	if (p == 0)
		result = "1";
	else if (p == 1)
		result = b;
	else
		result = b + " * " + spow(b, p-1);
	return result;
}

println(spow("4", 5));


a = b = c = d = e = 2;
a = (((a and b) or (c or d)) and e);

function prependIf(condition, code) {
	return .<  if (.~condition) { .~code ; } >.;
}

code = prependIf( .< true >. , .< println("OMG MIN MOY PEIS OTI THA EKTYPOTHEIS!!!"); >. );

println("Executing: ", .#.~code);
.!.~ code;



(function (code) { println(.!.~code); })
( .< 3  >. );


cry = .<

(function (code) { println(.!.<.~code>.); })
( .< 3 >. );

>.;
println("Executing: ", .#.~cry);
.!.~cry;
