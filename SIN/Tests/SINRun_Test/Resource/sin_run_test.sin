//f = .< function foo() { println("Hello forld"); } >. ;
//.!.< if (.~f) (.~f)(); >. ;

tested_code = nil;

//eepc = .<
//evaluation_party_code = .<
function veval(code) {
	println("-----------------------------\n// *** Evaluating - tested_code = ", code, ": ", .!.<.~code>.);
	tested_code = code;
}

//a = .< 3 >. ;
//veval(a);
//veval(.< (function (){ println(.~a); })() >.);

//>.; 
//.!.<.~evaluation_party_code>.;

//>.;
//.!.< .~eepc >.;

//.< function () { 4; } >.;
// .< 5; >. ;


//============ Libfuncs test ============//
hello_msg = .< "Hello Boola." >.;
test_sequence = (function (test_code) { veval(.< .~test_code >.); });
test_sequence(.< print(.~hello_msg)   >.);
test_sequence(.< println(.~hello_msg) >.);
test_sequence(.< tostring(tested_code)  >.);
test_sequence(.< 34 >.);
test_sequence(.< strtonum(.#.<.~tested_code>.)  >.);
test_sequence(.< typeof(tested_code) >.);
test_sequence(.< typeof(.~tested_code) >.);
// strsavetofile, input, fileopen, fileclose, filewrite, fileread do not want to be tested now
argument_related_libfunc = .< totalarguments >.;
test_sequence(.< (function argnum_babler() { a=.!.<.~argument_related_libfunc>.; return a(); })(0,1,2,3,4) >.);
argument_related_libfunc = .< arguments >.;
test_sequence(.< .~tested_code >.);

val = tested_code;
println("\n\n\n Tested code is: \n ------------- ", typeof(val), "\n", val , "\n -------------");
val = .#.<.~val>. + ";";
println(" Unparsing it gives: \n ------------- ", typeof(val), "\n", val, "\n -------------");
val = .@val;
println(" Compiling it gives: \n ------------- ", typeof(val), "\n", val, "'n -------------");























function pow(b, p) {
	if (p == 0)
		result = .< 1 >.;
	else if (p == 1)
		result = .< .~b >.; // could also be just "b"
	else
		result = .< .~b * .~pow(b, p-1) >.;
	return result;
}

code = pow(.< 4 >., 5);
println(.#.~code);
println(.!.~code);

// String manipulation equivalent
function spow(b, p) {
	if (p == 0)
		result = "1";
	else if (p == 1)
		result = b;
	else
		result = b + " * " + spow(b, p-1);
	return result;
}

println(spow("4", 5));


a = b = c = d = e = 2;
a = (((a and b) or (c or d)) and e);

function prependIf(condition, code) {
	return .<  if (.~condition) { .~code ; } >.;
}

code = prependIf( .< true >. , .< println("OMG MIN MOY PEIS OTI THA EKTYPOTHEIS!!!"); >. );

println("Executing: ", .#.~code);
.!.~ code;



(function (code) { println(.!.~code); })
( .< 3  >. );


cry = .<

(function (code) { println(.!.<.~code>.); })
( .< 3 >. );

>.;
println("Executing: ", .#.~cry);
.!.~cry;


///////////////////////////////////////////////
///////////////////////////////////////////////
///////////////////////////////////////////////
///////////////////////////////////////////////

a = b = c = d = nil;

if (not a)
	println("hello");
	
a = b;
c = [];
if (c.x)
	println("fail-0: ", c.x);
else if (d)
	println("fail-1: ", d);
else
	println("wow");
	

function point2(){
	return [
		"x" : 0,
		"y" : 1
	];
}

rectangle = [
	"width" : 10,
	"height" : 5,
	"point" : point2
];

println(rectangle.width);
println(rectangle[a = "height"]);
println(rectangle.point().x);
println(rectangle.point()["y"]);
println(rectangle.$keys);
println("Size of object rectangle ", rectangle.$size);

point = [
	"x" : 0,
	function Add10(self) { 
		self.x = self.x + 10;
		return self;
		//return self.x = slef.x + 10;	//<-- uncoment this and next comment
	}
];
println(point..Add10(point..Add10(point..Add10())));
//println(point.Add10(point));	//<--uncomment this and the previous comment


//println(point);
//println(point.x, " ", point.y);




a = [1];
a.x = [2];
a.x.y = [3];
a.x.y.z = 4;
println(a.x.y.z);
println(a.x.y);
println(a.x);
println(a);

anna = (function(){ return "Hello looli"; });
println(anna());
println((function(){return 2;})());
function dodeka(kioytena) { return kioytena + "tilefonima"; }
println(dodeka("kioytena "));

Me = ["pnigei": (function (to_parapono) { return "me pnigei " + to_parapono; })];
println( Me.pnigei("to paraponooo") );


function Point_new(x_, y_) { return [x: x_, y: y]; }


p1 = Point_new(0, 1); p2 = Point_new(2, 5);

println(p1, p2, pe);


function add(a, b) { return a + b; }



println("8: ", add(3,5));
op = add;
println("9: ", op(4,5));
function sub(a,b) { return a - b; }
{
	function add(a,b) { return sub(a,b); }
	local op = add;
	println("4: ", op(9,5));
}
println("15: ", op(8,7));

a = true;

if(a)
	println("If works");
	
if(not a)
	println("Should not be here");
else
	println("If else works");

i = 0;
while (i++ < 4) {
	println("continue, i == ", i);
	continue; 
	i = 10;
}

i = 0;
while (i < 4) {
	println("break, i == ", i);
	break; 
}

println("Testing while begin: Must print: 1, 2, 3, 4 befor the message end");
i = 0;
while(i < 4) 
	println(++i);
println("Testing while end\n\n\n");


println("Testing for begin: Must print: i == 0, j == 0, i == 1, j == 1, i == 2, j == 2, i == 3, j == 3 befor the message end");
for(i = 0, j = 0; i < 4; ++i, ++j) {
	println("i == ", i);
	continue;
	println("j == ", j);
}
println("Testing for end\n\n\n");


a = 5 + (2*3) - (4/2) + 3%2; // a = 10
println("a = 10: ", a);
b = "str";
println("b = \"str\": ", b);
c = true and (true or false); //Should be true
println("c = true: ", c);
d = nil;
println("d = nil: ", d);
e = (c == true) or (-a != 10);
println("e = true: ", e);
f = ++a > 10 or a++ >= 10 or --a < 10 or a-- <= 10;
println("f = true: ", f);
g = not f;
println("g = false: ", g);
println("Type of g: ", typeof(g));
// --- Objects
a = [ 12, antzuja: 42 ];
{
	a = 12;
	{
		a = false;
		println("a = false: ", a);
	}
	println("a = 12: ", a);
}
println("a = [...]: ", a);

// function () { return [amjuya: 12]; }

//meta_testing = .<x = "a" + "b">.;


/*** Simple tests that work ***/
// -------------
//	println(4);
// -------------
//	a = 4;
//	println(a);
// -------------
//	filepath = ".\\..\\..\\..\\Tests\\SINRun_Test\\Resource\\sin_run_test.sin";
//	a = fileopen(filepath);
//	println("The open file is: ", a);
// -------------
//	println("Contents: ", fileread(a));
// -------------



/*
//Koutsop unparse tests
function RetuenSelf() { return RetuenSelf; };

(function (num1, num2) { return RetuenSelf; })(1,2);

println("------------------");
(function (num1, num2) { return RetuenSelf; })(1,2)()()()();




function C(num) {
	println("num: ", num);
	return 12;
}
twelve = (function() { return C; })()(30);
println(twelve);


point = [
	"x" : 10.01,
	"y" : 10.01,
	function New(self) {
		return self;
	},

	"Add10"	: (function (self){ 
				self.x = self.x + 10;
				self.y = self.y + 10;
			})		
	,
	0,
	1,
	2,
	3
];
point..New();
a = point.x;
a = point.$keys;
a = point.$size;

println(point.$keys);
println(point.$size);


println("x (must be 10.01)", point..New().x);
println("x (must be 10.01)", point..New()[x]);	//does not if you want to worck do: point..New()["x"]



function B() {
	return;
	return 1+2+3+4+5;
}



function A(){}

A();

for(a = 1, b = 2; a < 4; ++a, ++b) 
	if(a < 4)
		println(a);

a = true;

if (a)
	b = "na pas na gami8eis";
	

if (a ){
	b = "na pas na gami8eis";
}
else if (a) {
	;	
}
else {
	;
}


//Mipos to .@ prepei sthn gramatikh na pernei ena expresion kai an run time den einai
//string na petaei ena error??
.@"malakas";
.#.!.<a>.;
.~a;
.~A();
.~(a);

{

a = 1;
a = ++a;
a = a++;
a = --a;
a = a--;

a = 1	
a = not a;			//assert
a = not (a and b and d and c and c and e);


while(flase) {
	local a = "malakas";
}

a = 1
a = -a;
a = -(a);
a = -(a+a);
a = a not a and b;	



a = ["x" : 1];
b = ++a.x;
c = a[x]++;
d = --a[x];
e = a.x--;


a.x.y;
a[x[y]];
a.x.y;
a[x[y.y[w.e.r.t.y[a[d]]]]];


}
*/
