==== EXPLAINING METAPROGRAMMING TO OUTSELVES ====

*** Some basics and why .~ is needed
.!.< x >. 
--> .![x]
--> x

function f() { return .< x >.; }

f() -> [x]
.!f() // syntax error
.~f() // .~expr --> execute expr and return ast
.~f() --> [x]
.!.~f()
---> .!.~[call:f()]
---> .![f()'s result]
---> .![x]
---> x

====================== TRICKS ==================
- Instead of doing the ugly...
	if_node = makeIfNode();
	setIfNodeExpression(if_node, makeExpression(..));
  Do this!
	code = .< something(); >.;
	if_code = .< if(true) { .~code ; } >.;
  And if you insist on having the if_code first (or as a modular addition)
	function prependIf(code) {
		return .< if(true) { .~code ; } >.;
	}
	genericCodeAddition = prependIf;
	code = genericCodeAddition(.< something(); >.);

