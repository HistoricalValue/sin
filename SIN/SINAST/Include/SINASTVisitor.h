/*
 *	Virtual Class
 */

#ifndef __SIN_SIN_AST_VISITOR_H__
#define __SIN_SIN_AST_VISITOR_H__


#include "SINASTNode.h"
#include "SINASTCommon.h"


#define SINASTVISITOR_VISIT_SIGNATURE(NODENAME) virtual void Visit(NODENAME##ASTNode const&)


namespace SIN {
	class ASTVisitor { 
	public :
		virtual ~ASTVisitor() {}


		SINASTVISITOR_VISIT_SIGNATURE(       ) = 0;
		SINASTVISITOR_VISIT_SIGNATURE(Number ) = 0;
		SINASTVISITOR_VISIT_SIGNATURE(String ) = 0;
		SINASTVISITOR_VISIT_SIGNATURE(Nil    ) = 0;
		SINASTVISITOR_VISIT_SIGNATURE(True   ) = 0;
		SINASTVISITOR_VISIT_SIGNATURE(False  ) = 0;
		SINASTVISITOR_VISIT_SIGNATURE(Add    ) = 0;
		SINASTVISITOR_VISIT_SIGNATURE(Sub    ) = 0;
		SINASTVISITOR_VISIT_SIGNATURE(Mul    ) = 0;
		SINASTVISITOR_VISIT_SIGNATURE(Div    ) = 0;
		SINASTVISITOR_VISIT_SIGNATURE(Mod    ) = 0;
//		SINASTVISITOR_VISIT_SIGNATURE(Incr   ) = 0;
//		SINASTVISITOR_VISIT_SIGNATURE(Decr   ) = 0;
		SINASTVISITOR_VISIT_SIGNATURE(Lt     ) = 0;
		SINASTVISITOR_VISIT_SIGNATURE(Gt     ) = 0;
		SINASTVISITOR_VISIT_SIGNATURE(Le     ) = 0;
		SINASTVISITOR_VISIT_SIGNATURE(Ge     ) = 0;
		SINASTVISITOR_VISIT_SIGNATURE(Eq     ) = 0;
		SINASTVISITOR_VISIT_SIGNATURE(Ne     ) = 0;
		SINASTVISITOR_VISIT_SIGNATURE(Or     ) = 0;
//		SINASTVISITOR_VISIT_SIGNATURE(Not    ) = 0;
		SINASTVISITOR_VISIT_SIGNATURE(And    ) = 0;
//		SINASTVISITOR_VISIT_SIGNATURE(For    ) = 0;
//		SINASTVISITOR_VISIT_SIGNATURE(While  ) = 0;
//		SINASTVISITOR_VISIT_SIGNATURE(If     ) = 0;
//		SINASTVISITOR_VISIT_SIGNATURE(IfElse ) = 0;
//		SINASTVISITOR_VISIT_SIGNATURE(Id	 ) = 0;
	};
}


#endif //__SIN_AST_VISITOR_H__
